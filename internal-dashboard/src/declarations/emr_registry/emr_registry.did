type AuthorizedCallerRequest = record { caller : principal };
type CanisterLogFeature = variant {
  filterMessageByContains;
  filterMessageByRegex;
};
type CanisterLogMessages = record {
  data : vec LogMessageData;
  lastAnalyzedMessageTimeNanos : opt nat64;
};
type CanisterLogMessagesInfo = record {
  features : vec opt CanisterLogFeature;
  lastTimeNanos : opt nat64;
  count : nat32;
  firstTimeNanos : opt nat64;
};
type CanisterLogRequest = variant {
  getMessagesInfo;
  getMessages : GetLogMessagesParameters;
  getLatestMessages : GetLatestLogMessagesParameters;
};
type CanisterLogResponse = variant {
  messagesInfo : CanisterLogMessagesInfo;
  messages : CanisterLogMessages;
};
type CanisterMetrics = record { data : CanisterMetricsData };
type CanisterMetricsData = variant {
  hourly : vec HourlyMetricsData;
  daily : vec DailyMetricsData;
};
type CollectMetricsRequestType = variant { force; normal };
type CreateEmrRequest = record {
  emr : vec EmrFragment;
  provider_id : text;
  user_id : text;
};
type CreateEmrResponse = record { header : Header };
type DailyMetricsData = record {
  updateCalls : nat64;
  canisterHeapMemorySize : NumericEntity;
  canisterCycles : NumericEntity;
  canisterMemorySize : NumericEntity;
  timeMillis : int;
};
type EmrFragment = record { key : text; value : text };
type EmrHeaderWithBody = record { body : vec EmrFragment; header : Header };
type GetInformationRequest = record {
  status : opt StatusRequest;
  metrics : opt MetricsRequest;
  logs : opt CanisterLogRequest;
  version : bool;
};
type GetInformationResponse = record {
  status : opt StatusResponse;
  metrics : opt MetricsResponse;
  logs : opt CanisterLogResponse;
  version : opt nat;
};
type GetLatestLogMessagesParameters = record {
  upToTimeNanos : opt nat64;
  count : nat32;
  filter : opt GetLogMessagesFilter;
};
type GetLogMessagesFilter = record {
  analyzeCount : nat32;
  messageRegex : opt text;
  messageContains : opt text;
};
type GetLogMessagesParameters = record {
  count : nat32;
  filter : opt GetLogMessagesFilter;
  fromTimeNanos : opt nat64;
};
type GetMetricsParameters = record {
  dateToMillis : nat;
  granularity : MetricsGranularity;
  dateFromMillis : nat;
};
type Header = record {
  provider_id : text;
  user_id : text;
  emr_id : text;
  registry_id : principal;
};
type HourlyMetricsData = record {
  updateCalls : vec nat64;
  canisterHeapMemorySize : vec nat64;
  canisterCycles : vec nat64;
  canisterMemorySize : vec nat64;
  timeMillis : int;
};
type LogMessageData = record { timeNanos : nat64; message : text };
type MetricsGranularity = variant { hourly; daily };
type MetricsRequest = record { parameters : GetMetricsParameters };
type MetricsResponse = record { metrics : opt CanisterMetrics };
type NumericEntity = record {
  avg : nat64;
  max : nat64;
  min : nat64;
  first : nat64;
  last : nat64;
};
type ReadEmrByIdRequest = record {
  provider_id : text;
  user_id : text;
  emr_id : text;
};
type ReadEmrByIdResponse = record { emr : EmrHeaderWithBody };
type RemoveEmrRequest = record { header : Header };
type RemoveEmrResponse = record { status : bool };
type StatusRequest = record {
  memory_size : bool;
  cycles : bool;
  heap_memory_size : bool;
};
type StatusResponse = record {
  memory_size : opt nat64;
  cycles : opt nat64;
  heap_memory_size : opt nat64;
};
type UpdateEmrRequest = record { fields : vec EmrFragment; header : Header };
type UpdateInformationRequest = record {
  metrics : opt CollectMetricsRequestType;
};
service : () -> {
  add_authorized_caller : (AuthorizedCallerRequest) -> ();
  add_authorized_metrics_collector : (AuthorizedCallerRequest) -> ();
  create_emr : (CreateEmrRequest) -> (CreateEmrResponse);
  getCanistergeekInformation : (GetInformationRequest) -> (
      GetInformationResponse,
    ) query;
  metrics : () -> (text) query;
  ping : () -> () query;
  read_emr_by_id : (ReadEmrByIdRequest) -> (ReadEmrByIdResponse) query;
  remove_authorized_caller : (AuthorizedCallerRequest) -> ();
  remove_authorized_metrics_collector : (AuthorizedCallerRequest) -> ();
  remove_emr : (RemoveEmrRequest) -> (RemoveEmrResponse);
  updateCanistergeekInformation : (UpdateInformationRequest) -> ();
  update_emr : (UpdateEmrRequest) -> (RemoveEmrRequest);
}
